#ifndef LAUNCH_CORE_UDPLAYER_
#define LAUNCH_CORE_UDPLAYER_

#include "../../net/socket/Socket.h"
#include "../../net/packet/Packet.h"
#include "../../net/network_layer/NetworkLayer.h"
#include "../../vector/vector.h"
#include <stdint.h>


class UDPLayer : public NetworkLayer {
public:
    UDP() : src_port(port_num) {
    }

    RetType create_receive_port(uint16_t port_num) {
        this->receive_ports.push_back(port_num);

    };

    RetType receive(Packet &packet, sockmsg_t &info, NetworkLayer *caller) {
        for (int i = 0; i < receive_ports.size(); i++) {

        }
    }

    RetType transmit(Packet &packet, sockmsg_t &info, NetworkLayer *caller) {
        sockmsg_t sockmsg = {

        }


        return caller->transmit(packet, info, this);

    }

private:
    uint16_t src_port;
    alloc::Vector<uint16_t, 16> receive_ports;



};


#endif //LAUNCH_CORE_UDPLAYER_
